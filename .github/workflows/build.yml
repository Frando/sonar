name: Test, Build, Publish

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
      RUST_LOG: debug
      DEBUG: "*"
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        arch: [x86_64]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - os: ubuntu-latest
            arch: armv7
            target: armv7-unknown-linux-gnueabihf
            cross: true
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: macOS-latest
            target: x86_64-apple-darwin
            cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
    steps:
      - name: Get tag/branch name
        id: vars
        shell: bash
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Test (Rust)
        uses: actions-rs/cargo@v1
        with:
          command: test
          use-cross: ${{ matrix.cross }} 
     
      - name: Test (NodeJS)
        # TODO: Find out why NodeJS fail on windows.
        # Disabled for now because otherwise builds take forever.
        if: matrix.os != 'windows-latest'
        env:
          RUST_ENV: development
        run: |
          npm install --ignore-scripts
          npm test

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.cross }}

      - name: Package (Linux or MacOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
        env:
          FILENAME: sonar-tantivy-${{ steps.vars.outputs.tag }}-${{ matrix.target }}.tar.gz
        run: |
          tar -zvcf $FILENAME README.md LICENSE -C target/${{ matrix.target }}/release/ sonar-tantivy
          tar -tzvf $FILENAME

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        env:
          FILENAME: sonar-tantivy-${{ steps.vars.outputs.tag }}-${{ matrix.target }}.tar.gz
        run: |
          7z a $Env:FILENAME README.md LICENSE .\target\${{ matrix.target }}\release\sonar-tantivy.exe
          7z l $Env:FILENAME

      - name: Publish (Github Releases)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            *.zip
            *.tar.gz

  publish_npm:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish (NPM)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish
